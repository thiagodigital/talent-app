services:
  backend:
    build:
      context: ./backend
      dockerfile: ./docker/Dockerfile
    container_name: backend_app
    working_dir: /var/www
    volumes:
      - ./backend:/var/www
    networks:
      - talent_network_app
    depends_on:
      - mariadb

  frontend:
    build:
      context: ./frontend
      dockerfile: ./docker/Dockerfile
    container_name: frontend_app
    working_dir: /app
    volumes:
      - ./frontend:/app
      - /app/node_modules
    command: npm run dev -- --host 0.0.0.0
    networks:
      - talent_network_app
    depends_on:
      - backend

  nginx:
    image: nginx:latest
    container_name: nginx_app
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_PORT_SEG:-443}:443"
    volumes:
      - ./backend:/var/www
      - ./docker/nginx/certs_letsencrypt:/etc/letsencrypt
      - ./docker/nginx/conf.d:/etc/nginx/conf.d
      - ./docker/nginx/html:/var/www/certbot
    depends_on:
      - backend
      - frontend
    networks:
      - talent_network_app

  certbot:
    image: certbot/certbot
    container_name: certbot_app
    volumes:
      - ./docker/nginx/certs_letsencrypt:/etc/letsencrypt
      - ./docker/nginx/html:/var/www/certbot
    entrypoint: >
      sh -c "trap exit TERM;
             while :; do
               if [ \"$APP_ENV\" = \"production\" ]; then
                 certbot renew --webroot -w /var/www/certbot &&
                 nginx -s reload;
               fi;
               sleep 12h & wait $${!};
             done"

  mariadb:
    image: "mariadb:10.7"
    container_name: database_app
    ports:
      - "${DB_PORT:-3366}:3306"
    environment:
      MARIADB_ROOT_PASSWORD: "${DB_PASSWORD}"
      MARIADB_ROOT_HOST: "%"
      MARIADB_DATABASE: "${DB_DATABASE}"
      MARIADB_USER: "${DB_USERNAME}"
      MARIADB_PASSWORD: "${DB_PASSWORD}"
      MARIADB_ALLOW_EMPTY_PASSWORD: "yes"
    volumes:
      - "mariadb-data:/var/lib/mysql"
      - "./backend/vendor/laravel/sail/database/mysql/create-testing-database.sh:/docker-entrypoint-initdb.d/10-create-testing-database.sh"
    networks:
      - talent_network_app
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-p${DB_PASSWORD}"]
      interval: 10s
      timeout: 5s
      retries: 5
  queue:
    build:
      context: ./backend
      dockerfile: ./docker/Dockerfile
    container_name: queue_app
    working_dir: /var/www
    command: php artisan queue:work --verbose --tries=3 --timeout=90
    volumes:
      - ./backend:/var/www
    depends_on:
      - mariadb
      - backend
    networks:
      - talent_network_app
    restart: unless-stopped

networks:
  talent_network_app:
    driver: bridge

volumes:
  mariadb-data-app:
    driver: local
    name: mariadb-data-app
